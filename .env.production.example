# Authentication (Clerk)
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_**********************
CLERK_SECRET_KEY=sk_test_**********************

# AWS SES Configuration
AWS_ACCESS_KEY=AKIAXXXXXXXXXXXXXXXX
AWS_SECRET_KEY=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Stripe Configuration
STRIPE_PUBLISHABLE_KEY=pk_test_**********************
STRIPE_SECRET_KEY=sk_test_**********************
STRIPE_WEBHOOK_SECRET=whsec_**********************

# Application Configuration
NEXT_PUBLIC_WEBSITE_URL=https://your-app-name.onrender.com  # Will be set automatically by Render using ${RENDER_EXTERNAL_URL}
JWT_SECRET_KEY=replace_with_64_character_random_string  # Generate using: openssl rand -hex 32
MONGODB_URI=mongodb+srv://user:password@cluster.mongodb.net/database  # Use your production database URI
ZEROBOUNCE_API_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ⚠️ SECURITY NOTICE ⚠️
# 1. This is an example file. NEVER commit real credentials to version control
# 2. Create a .env.local file for development and add it to .gitignore
# 3. For production:
#    - Store all secrets securely in Render's environment variables dashboard
#    - Generate new production credentials - NEVER reuse development keys
#    - Follow the principle of least privilege for all API keys
#
# Production Deployment Checklist:
# ✓ Generate new production credentials for all services
# ✓ Configure Clerk with production instance
# ✓ Set up AWS SES in production (verify out of sandbox mode)
# ✓ Configure Stripe with production account and keys
# ✓ Update webhook endpoints with production URLs
# ✓ Use production MongoDB instance with IP allowlist
# ✓ Generate unique random JWT secret for production
# ✓ Enable required security features (SSL, rate limiting, etc.)
# ✓ Set up monitoring and error tracking
